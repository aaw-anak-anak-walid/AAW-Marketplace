version: "3.8"

services:
  # Node.js application service
  microservice:
    build: .
    ports:
      - "8001:8001"
    environment:
      - TENANT_ID=47dd6b24-0b23-46b0-a662-776158d089ba
      - ADMIN_TENANT_ID=47dd6b24-0b23-46b0-a662-776158d089ba
      - JWT_SECRET=auth_ms_jwt_secret
      - ADMIN_JWT_SECRET=admin_auth_ms_jwt_secret
      - AUTH_MS_URL=http://host.docker.internal:8000
      - PRODUCT_MS_URL=http://host.docker.internal:8002
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - orders_network

  # PostgreSQL database service
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5001:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - orders_network

  # Redis service
  redis:
    image: redis:alpine
    ports:
      - "6001:6379"  # Map to a different port to avoid conflicts with other services
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes  # Enable persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - orders_network

networks:
  orders_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
